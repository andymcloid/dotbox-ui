#!/usr/bin/env node

/**
 * Dynamic Index Generator for Dotbox UI
 * Automatically scans src/components/ folder and generates index.js and index.css
 * This ensures all components are included without manual maintenance
 */

const fs = require('fs');
const path = require('path');

const COMPONENTS_DIR = path.join(__dirname, '../src/components');
const SRC_DIR = path.join(__dirname, '../src');

/**
 * Scans the components directory and returns component information
 */
function scanComponents() {
    const components = [];
    const componentDirs = fs.readdirSync(COMPONENTS_DIR, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name)
        .sort(); // Ensure consistent ordering

    for (const componentName of componentDirs) {
        const componentPath = path.join(COMPONENTS_DIR, componentName);
        const jsFile = path.join(componentPath, `${componentName}.js`);
        const cssFile = path.join(componentPath, `${componentName}.css`);

        // Check if required files exist
        const hasJS = fs.existsSync(jsFile);
        const hasCss = fs.existsSync(cssFile);

        if (hasJS) {
            components.push({
                name: componentName,
                hasJS,
                hasCss,
                jsPath: `./components/${componentName}/${componentName}.js`,
                cssPath: `./components/${componentName}/${componentName}.css`
            });
        } else {
            console.warn(`Warning: Component ${componentName} missing ${componentName}.js file`);
        }
    }

    return components;
}

/**
 * Generates the index.js file with all component imports and exports
 */
function generateIndexJS(components) {
    const imports = components
        .map(comp => `const ${comp.name} = require('${comp.jsPath}');`)
        .join('\n');

    const exports = components
        .map(comp => `    ${comp.name},`)
        .join('\n');

    const content = `// Auto-generated index.js - DO NOT EDIT MANUALLY
// This file is generated by build/generate-index.js
// To add a component, create it in src/components/ComponentName/ and run npm run build

// Import all components
${imports}

// Import all styles (except theming)
require('./index.css');

// Export components
const Dotbox = {
${exports}
};

// Global export for browser usage
if (typeof window !== 'undefined') {
    window.Dotbox = Dotbox;
}

// Module export for Node.js usage
module.exports = Dotbox;
`;

    return content;
}

/**
 * Generates the index.css file with all component CSS imports
 */
function generateIndexCSS(components) {
    const styleImports = [`@import './styles/main.css';`];
    
    components
        .filter(comp => comp.hasCss)
        .forEach(comp => {
            styleImports.push(`@import '${comp.cssPath}';`);
        });

    const content = `/* Auto-generated index.css - DO NOT EDIT MANUALLY */
/* This file is generated by build/generate-index.js */
/* To add component styles, create ComponentName.css in src/components/ComponentName/ and run npm run build */

${styleImports.join('\n')}
`;

    return content;
}

/**
 * Main function that generates both index files
 */
function generateIndexFiles() {
    console.log('üîç Scanning components directory...');
    const components = scanComponents();
    
    console.log(`üì¶ Found ${components.length} components:`);
    components.forEach(comp => {
        const status = [];
        if (comp.hasJS) status.push('JS');
        if (comp.hasCss) status.push('CSS');
        console.log(`   - ${comp.name} (${status.join(', ')})`);
    });

    console.log('\nüìù Generating index.js...');
    const indexJS = generateIndexJS(components);
    fs.writeFileSync(path.join(SRC_DIR, 'index.js'), indexJS);

    console.log('üé® Generating index.css...');
    const indexCSS = generateIndexCSS(components);
    fs.writeFileSync(path.join(SRC_DIR, 'index.css'), indexCSS);

    console.log('‚úÖ Index files generated successfully!');
    console.log(`   - ${components.length} components included`);
    console.log(`   - ${components.filter(c => c.hasCss).length} component stylesheets included`);
}

// Run if called directly
if (require.main === module) {
    try {
        generateIndexFiles();
    } catch (error) {
        console.error('‚ùå Error generating index files:', error);
        process.exit(1);
    }
}

module.exports = { generateIndexFiles, scanComponents };