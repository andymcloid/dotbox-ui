[
  {
    "id": "buttons",
    "name": "Buttons",
    "description": "Flexible button component with multiple variants and states.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-button variant=\"primary\">Primary</dotbox-button>\n<dotbox-button variant=\"secondary\">Secondary</dotbox-button>\n<dotbox-button variant=\"danger\">Danger</dotbox-button>\n<dotbox-button variant=\"success\">Success</dotbox-button>\n\n<!-- With attributes -->\n<dotbox-button variant=\"primary\" size=\"large\" icon=\"🚀\">Launch</dotbox-button>\n<dotbox-button variant=\"danger\" disabled>Disabled</dotbox-button>\n\n<!-- Event handling -->\n<script>\ndocument.querySelectorAll('dotbox-button').forEach(button => {\n    button.addEventListener('dotbox-click', (e) => {\n        console.log('Button clicked:', e.detail);\n    });\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst button = new Dotbox.Button({\n    text: 'Click Me',\n    variant: 'primary',\n    size: 'medium',\n    onClick: () => console.log('Clicked!')\n});\ndocument.body.appendChild(button.getElement());\n</script>"
  },
  {
    "id": "modals",
    "name": "Modal Dialogs",
    "description": "Modal dialogs for displaying content in an overlay.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-modal-dialog id=\"my-modal\" title=\"Example Modal\">\n    <p>Modal content goes here</p>\n    <p>Automatically handles ESC key and overlay clicks</p>\n</dotbox-modal-dialog>\n\n<dotbox-button onclick=\"document.getElementById('my-modal').show()\">\n    Open Modal\n</dotbox-button>\n\n<!-- Event handling -->\n<script>\ndocument.getElementById('my-modal').addEventListener('dotbox-open', (e) => {\n    console.log('Modal opened:', e.detail.id);\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst modal = new Dotbox.ModalDialog('demo-modal', {\n    closeOnOverlayClick: true,\n    closeOnEsc: true\n});\n\nmodal.setTitle('Demo Modal')\n    .setBody('<p>This is a demo modal dialog.</p>')\n    .addFooterButton('Close', 'action-btn', () => modal.close());\n\nconst openModalBtn = new Dotbox.Button({\n    text: 'Open Modal',\n    onClick: () => modal.show()\n});\ndocument.body.appendChild(openModalBtn.getElement());\n</script>"
  },
  {
    "id": "tabs",
    "name": "Tab Views",
    "description": "Tabbed interface for organizing content.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-tab-view active-tab=\"overview\">\n    <dotbox-tab-panel id=\"overview\" label=\"Overview\" icon=\"📊\">\n        <h3>Overview Content</h3>\n        <p>This is the overview tab content.</p>\n    </dotbox-tab-panel>\n    <dotbox-tab-panel id=\"details\" label=\"Details\" icon=\"📋\">\n        <h3>Details Content</h3>\n        <p>This is the details tab content.</p>\n    </dotbox-tab-panel>\n</dotbox-tab-view>\n\n<!-- Event handling -->\n<script>\ndocument.querySelector('dotbox-tab-view').addEventListener('dotbox-tab-change', (e) => {\n    console.log('Active tab changed to:', e.detail.activeTab);\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst tabView = new Dotbox.TabView({\n    tabs: [\n        { id: 'tab1', label: 'Tab 1', content: 'Content 1' },\n        { id: 'tab2', label: 'Tab 2', content: 'Content 2' }\n    ]\n});\n\ndocument.body.appendChild(tabView.getElement());\n</script>"
  },
  {
    "id": "textbox",
    "name": "Text Boxes",
    "description": "Input fields with various states and validations.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-textbox \n    label=\"Username\" \n    placeholder=\"Enter your username\"\n    help-text=\"This will be your display name\">\n</dotbox-textbox>\n\n<dotbox-textbox \n    label=\"Email\" \n    type=\"email\" \n    placeholder=\"user@example.com\"\n    help-text=\"We'll never share your email\">\n</dotbox-textbox>\n\n<!-- Event handling -->\n<script>\ndocument.querySelector('dotbox-textbox').addEventListener('dotbox-input', (e) => {\n    console.log('Input value:', e.detail.value);\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst textBox = new Dotbox.TextBox({\n    label: 'Username',\n    placeholder: 'Enter your username',\n    helpText: 'This will be your display name',\n    onChange: (e) => console.log('Text changed:', e.target.value)\n});\n\ndocument.body.appendChild(textBox.getContainer());\n</script>"
  },
  {
    "id": "dropdown",
    "name": "Dropdown",
    "description": "Select dropdown component with TextBox-like styling and multiple options.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-dropdown \n    label=\"Country\" \n    placeholder=\"Select your country\"\n    help-text=\"Choose your country of residence\"\n    options='[{\"value\":\"us\",\"label\":\"United States\"},{\"value\":\"ca\",\"label\":\"Canada\"},{\"value\":\"uk\",\"label\":\"United Kingdom\"},{\"value\":\"de\",\"label\":\"Germany\"},{\"value\":\"fr\",\"label\":\"France\"}]'>\n</dotbox-dropdown>\n\n<dotbox-dropdown \n    label=\"Priority\" \n    placeholder=\"Select priority level\"\n    size=\"small\"\n    options='[{\"value\":\"low\",\"label\":\"Low\"},{\"value\":\"medium\",\"label\":\"Medium\"},{\"value\":\"high\",\"label\":\"High\"},{\"value\":\"urgent\",\"label\":\"Urgent\"}]'\n    value=\"medium\">\n</dotbox-dropdown>\n\n<!-- With validation states -->\n<dotbox-dropdown \n    label=\"Status\" \n    placeholder=\"Select status\"\n    error\n    help-text=\"Please select a valid status\"\n    options='[{\"value\":\"active\",\"label\":\"Active\"},{\"value\":\"inactive\",\"label\":\"Inactive\"},{\"value\":\"pending\",\"label\":\"Pending\"}]'>\n</dotbox-dropdown>\n\n<!-- Event handling -->\n<script>\ndocument.querySelector('dotbox-dropdown').addEventListener('dotbox-change', (e) => {\n    console.log('Selection changed:', e.detail.value, e.detail.selectedOption);\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst dropdown = new Dotbox.Dropdown({\n    label: 'Country',\n    placeholder: 'Select your country',\n    options: [\n        { value: 'us', label: 'United States' },\n        { value: 'ca', label: 'Canada' },\n        { value: 'uk', label: 'United Kingdom' },\n        { value: 'de', label: 'Germany' },\n        { value: 'fr', label: 'France' }\n    ],\n    helpText: 'Choose your country of residence',\n    onChange: (e) => console.log('Selected:', e.target.value)\n});\n\ndocument.body.appendChild(dropdown.getContainer());\n</script>"
  },
  {
    "id": "metrics",
    "name": "Metric Items",
    "description": "Display metrics with trends and icons.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-metric label=\"CPU Usage\" value=\"75%\" icon=\"📈\" trend=\"up\"></dotbox-metric>\n<dotbox-metric label=\"Memory Usage\" value=\"64%\" icon=\"💾\" trend=\"down\"></dotbox-metric>\n<dotbox-metric label=\"Active Users\" value=\"1,234\" icon=\"👥\" trend=\"up\"></dotbox-metric>\n\n<!-- With custom styling -->\n<dotbox-metric \n    label=\"Revenue\" \n    value=\"$12,345\" \n    icon=\"💰\" \n    trend=\"up\"\n    style=\"--metric-bg: #e8f5e8; --metric-border: #4caf50;\">\n</dotbox-metric>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst metric = new Dotbox.MetricItem('cpu-metric', {\n    label: 'CPU Usage',\n    value: '75%',\n    trend: 'up',\n    icon: '📈'\n});\n\ndocument.body.appendChild(metric.getElement());\n</script>"
  },
  {
    "id": "toolbuttons",
    "name": "Tool Buttons",
    "description": "Specialized buttons for tools and actions.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-tool-button icon=\"🔧\" tooltip=\"Settings\" variant=\"default\"></dotbox-tool-button>\n<dotbox-tool-button icon=\"📊\" tooltip=\"Analytics\" variant=\"primary\"></dotbox-tool-button>\n<dotbox-tool-button icon=\"🗑️\" tooltip=\"Delete\" variant=\"danger\"></dotbox-tool-button>\n<dotbox-tool-button icon=\"⭐\" text=\"Favorite\" tooltip=\"Add to favorites\"></dotbox-tool-button>\n\n<!-- With active state -->\n<dotbox-tool-button icon=\"🎨\" tooltip=\"Theme\" active></dotbox-tool-button>\n\n<!-- Event handling -->\n<script>\ndocument.querySelectorAll('dotbox-tool-button').forEach(button => {\n    button.addEventListener('dotbox-click', (e) => {\n        console.log('Tool button clicked:', e.detail);\n    });\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst toolButton = new Dotbox.ToolButton({\n    icon: '🔧',\n    tooltip: 'Settings',\n    onClick: () => console.log('Tool clicked!')\n});\n\ndocument.body.appendChild(toolButton.getElement());\n</script>"
  },
  {
    "id": "codeblock",
    "name": "Code Block",
    "description": "Syntax-highlighted code display component with multiple language support.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-code-block language=\"javascript\">\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet('World'));\n</dotbox-code-block>\n\n<!-- Multi-line code with HTML entities -->\n<dotbox-code-block language=\"html\">\n&lt;div class='container'&gt;\n    &lt;h1&gt;Welcome&lt;/h1&gt;\n    &lt;p&gt;Hello World!&lt;/p&gt;\n&lt;/div&gt;\n</dotbox-code-block>\n\n<!-- CSS example -->\n<dotbox-code-block language=\"css\">\n.btn {\n    padding: 0.75rem 1rem;\n    border-radius: 0.375rem;\n    background: var(--color-primary);\n    color: white;\n}\n</dotbox-code-block>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\nconst codeBlock = new Dotbox.CodeBlock({\n    language: 'javascript',\n    code: 'function greet(name) {\\\\n    return \\`Hello, \\${name}!\\`;\\\\n}\\\\n\\\\nconsole.log(greet(\\'World\\'));'\n});\n\ndocument.body.appendChild(codeBlock.getElement());\n</script>"
  },
  {
    "id": "menu",
    "name": "Menu",
    "description": "Navigation menu component with selectable items.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-menu \n    data-items='[{\"id\":\"home\",\"label\":\"Home\"},{\"id\":\"about\",\"label\":\"About\"},{\"id\":\"services\",\"label\":\"Services\"},{\"id\":\"contact\",\"label\":\"Contact\"}]'\n    selected=\"home\"\n    bordered=\"true\">\n</dotbox-menu>\n\n<!-- With routing mode (hash navigation) -->\n<dotbox-menu \n    data-items='[{\"id\":\"dashboard\",\"label\":\"Dashboard\"},{\"id\":\"analytics\",\"label\":\"Analytics\"},{\"id\":\"settings\",\"label\":\"Settings\"}]'\n    selected=\"dashboard\"\n    routing-mode>\n</dotbox-menu>\n\n<!-- Event handling -->\n<script>\ndocument.querySelector('dotbox-menu').addEventListener('dotbox-select', (e) => {\n    console.log('Selected menu item:', e.detail.selectedId);\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\n// Standard menu\nconst menu = new Dotbox.Menu({\n    items: [\n        { id: 'home', label: 'Home' },\n        { id: 'about', label: 'About' },\n        { id: 'services', label: 'Services' },\n        { id: 'contact', label: 'Contact' }\n    ],\n    selected: 'home',\n    onSelect: (id) => console.log('Selected:', id)\n});\n\n// Menu with routing mode (hash navigation)\nconst routingMenu = new Dotbox.Menu({\n    items: [\n        { id: 'dashboard', label: 'Dashboard' },\n        { id: 'analytics', label: 'Analytics' },\n        { id: 'settings', label: 'Settings' }\n    ],\n    routingMode: true, // Enable hash-based routing\n    onSelect: (id) => console.log('Navigated to:', id)\n});\n\ndocument.body.appendChild(menu.getElement());\ndocument.body.appendChild(routingMenu.getElement());\n</script>"
  },
  {
    "id": "loader",
    "name": "Loader",
    "description": "Animated SVG loading indicator with multiple sizes and color variants.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-loader></dotbox-loader>\n<dotbox-loader variant=\"secondary\"></dotbox-loader>\n<dotbox-loader variant=\"success\"></dotbox-loader>\n<dotbox-loader variant=\"danger\"></dotbox-loader>\n\n<!-- Different sizes -->\n<dotbox-loader size=\"small\"></dotbox-loader>\n<dotbox-loader size=\"medium\"></dotbox-loader>\n<dotbox-loader size=\"large\"></dotbox-loader>\n\n<!-- Programmatic control -->\n<dotbox-loader id=\"myLoader\" variant=\"primary\" size=\"large\"></dotbox-loader>\n\n<script>\nconst loader = document.getElementById('myLoader');\n\n// Show/hide programmatically\nsetTimeout(() => loader.hide(), 3000);\nsetTimeout(() => loader.show(), 5000);\n\n// Change properties\nsetTimeout(() => {\n    loader.setVariant('success');\n    loader.setSize('small');\n}, 7000);\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\n// Basic loader\nconst loader = new Dotbox.Loader({\n    size: 'medium',\n    variant: 'primary'\n});\n\n// Different variants\nconst successLoader = new Dotbox.Loader({\n    size: 'large',\n    variant: 'success'\n});\n\nconst dangerLoader = new Dotbox.Loader({\n    size: 'small',\n    variant: 'danger'\n});\n\n// Add to page\ndocument.body.appendChild(loader.getElement());\ndocument.body.appendChild(successLoader.getElement());\ndocument.body.appendChild(dangerLoader.getElement());\n\n// Control programmatically\nsetTimeout(() => {\n    loader.setVariant('secondary');\n    successLoader.hide();\n}, 3000);\n</script>"
  },
  {
    "id": "checkbox",
    "name": "Checkbox",
    "description": "Animated checkbox component with SVG checkmark and smooth transitions.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-checkbox label=\"Accept terms and conditions\"></dotbox-checkbox>\n<dotbox-checkbox label=\"Newsletter subscription\" checked></dotbox-checkbox>\n<dotbox-checkbox label=\"Disabled option\" disabled></dotbox-checkbox>\n\n<!-- Different sizes -->\n<dotbox-checkbox label=\"Small checkbox\" size=\"small\"></dotbox-checkbox>\n<dotbox-checkbox label=\"Medium checkbox\" size=\"medium\"></dotbox-checkbox>\n<dotbox-checkbox label=\"Large checkbox\" size=\"large\"></dotbox-checkbox>\n\n<!-- Different variants -->\n<dotbox-checkbox label=\"Primary\" variant=\"primary\" checked></dotbox-checkbox>\n<dotbox-checkbox label=\"Success\" variant=\"success\" checked></dotbox-checkbox>\n<dotbox-checkbox label=\"Danger\" variant=\"danger\" checked></dotbox-checkbox>\n\n<!-- Form integration -->\n<dotbox-checkbox label=\"Checkbox with name\" name=\"preferences\" value=\"notifications\" checked></dotbox-checkbox>\n\n<!-- Event handling -->\n<script>\ndocument.querySelectorAll('dotbox-checkbox').forEach(checkbox => {\n    checkbox.addEventListener('dotbox-change', (e) => {\n        console.log('Checkbox changed:', e.detail);\n    });\n});\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\n// Basic checkbox\nconst checkbox = new Dotbox.Checkbox({\n    label: 'Accept terms and conditions',\n    checked: false,\n    onChange: (e) => console.log('Checked:', e.target.checked)\n});\n\n// Different variants and sizes\nconst successCheckbox = new Dotbox.Checkbox({\n    label: 'Success variant',\n    variant: 'success',\n    size: 'large',\n    checked: true\n});\n\nconst smallCheckbox = new Dotbox.Checkbox({\n    label: 'Small size',\n    size: 'small',\n    name: 'preferences',\n    value: 'notifications'\n});\n\n// Add to page\ndocument.body.appendChild(checkbox.getElement());\ndocument.body.appendChild(successCheckbox.getElement());\ndocument.body.appendChild(smallCheckbox.getElement());\n\n// Control programmatically\nsetTimeout(() => {\n    checkbox.setChecked(true);\n    successCheckbox.setVariant('danger');\n    smallCheckbox.setDisabled(true);\n}, 3000);\n</script>"
  },
  {
    "id": "section",
    "name": "Section",
    "description": "Basic content section container with optional title, perfect for organizing content blocks.",
    "codeWC": "<!-- Web Components (Primary) -->\n<dotbox-section title=\"Getting Started\">\n    <p>This is a basic section with a title. Perfect for organizing content into logical blocks.</p>\n    <p>Sections automatically handle spacing, shadows, and theme integration.</p>\n</dotbox-section>\n\n<!-- Section without title -->\n<dotbox-section>\n    <h3>Custom content</h3>\n    <p>This section has no title attribute, so it's just a styled container.</p>\n    <ul>\n        <li>Great for grouping related content</li>\n        <li>Consistent styling with theme</li>\n        <li>Responsive design</li>\n    </ul>\n</dotbox-section>\n\n<!-- Section with mixed content -->\n<dotbox-section title=\"Component Demo\">\n    <dotbox-button variant=\"primary\">Click me</dotbox-button>\n    <dotbox-textbox label=\"Name\" placeholder=\"Enter your name\"></dotbox-textbox>\n    <dotbox-checkbox label=\"I agree to the terms\"></dotbox-checkbox>\n</dotbox-section>\n\n<!-- Programmatic title updates -->\n<dotbox-section id=\"dynamicSection\" title=\"Original Title\">\n    <p>This section's title can be changed programmatically.</p>\n</dotbox-section>\n\n<script>\n// Change title after 3 seconds\nsetTimeout(() => {\n    document.getElementById('dynamicSection').setTitle('Updated Title!');\n}, 3000);\n</script>",
    "codeJS": "<!-- JavaScript API (Alternative) -->\n<script>\n// Basic section with title\nconst section = new Dotbox.Section({\n    title: 'Getting Started'\n});\nsection.setContent('<p>This is a basic section created with JavaScript.</p>');\n\n// Section without title\nconst plainSection = new Dotbox.Section();\nplainSection.setContent(`\n    <h3>Custom Content</h3>\n    <p>This section has no title, just content.</p>\n    <ul>\n        <li>Perfect for flexible layouts</li>\n        <li>Easy to customize</li>\n    </ul>\n`);\n\n// Section with components\nconst componentSection = new Dotbox.Section({\n    title: 'Component Demo'\n});\n\n// Add components to section\nconst button = new Dotbox.Button({ text: 'Click me', variant: 'primary' });\nconst textbox = new Dotbox.TextBox({ label: 'Name', placeholder: 'Enter your name' });\n\ncomponentSection.appendChild(button.getElement());\ncomponentSection.appendChild(textbox.getContainer());\n\n// Add to page\ndocument.body.appendChild(section.getElement());\ndocument.body.appendChild(plainSection.getElement());\ndocument.body.appendChild(componentSection.getElement());\n\n// Update title programmatically\nsetTimeout(() => {\n    section.setTitle('Updated Title!');\n}, 3000);\n</script>"
  }
]